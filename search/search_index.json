{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Phylm","text":"<p>When deciding which film to watch next, it can be helpful to have some key datapoints at your fingertips, for example, the genre, the cast, the Metacritic score and, perhaps most importantly, the runtime. This package provides a Phylm class to gather information from various sources for a given film.</p>"},{"location":"#installing","title":"Installing","text":"<pre><code>pip install phylm\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from phylm import Phylm\n&gt;&gt;&gt; p = Phylm(\"The Matrix\")\n&gt;&gt;&gt; asyncio.run(p.load_source(\"imdb\"))\n&gt;&gt;&gt; p.imdb.rating\n8.7\n</code></pre> <p>This package uses web scraping for the Rotten Tomatoes and Metacritic results and is therefore at the mercy of changes made to those webpages.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#issues","title":"Issues","text":"<p>If you notice an issue with <code>phylm</code> or would like to suggest a feature or just have a general question, please raise an issue on GitHub. If it's an issue that needs debugging please make sure to include the version of <code>phylm</code> in the issue description. You can retrieve the version with the following:</p> <pre><code>pip freeze | grep phylm\n</code></pre>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>If you would like to contribute to the repo, you would be most welcome. If you're tackling an existing issue please comment on the issue that you'd like to take it on. If it's a new feature/bug, please first raise an issue. If it's a trivial change (typos, documentation etc.) then no need to raise an issue.</p>"},{"location":"contributing/#local-development","title":"Local Development","text":"<p>In order to work on your contribution, you'll need to first fork the repo and then clone it to your local machine:</p> <pre><code>git clone git@github.com:&lt;your username&gt;/phylm.git\ncd phylm\n</code></pre> <p>You'll need <code>python</code> 3.8 or 3.9 to run this package. You can follow the instructions here to install and use these versions.</p> <p>This package uses <code>poetry</code> to manage dependencies. Ensure you have <code>poetry</code> installed, instructions here and run:</p> <pre><code>poetry install\n</code></pre> <p>This will install the dependencies into a <code>.venv</code> virtual environment. You can activate the env with either <code>source .venv/bin/activate</code> or <code>poetry shell</code>.</p> <p>Next install the <code>pre-commit</code> hooks with:</p> <pre><code>pre-commit install\n</code></pre> <p>Nox is used to run tests, linters, type checkers etc. These are all run in the CI and on <code>git commit</code> but if you'd like to run them manually, you can do so with, eg:</p> <pre><code>nox --session=tests\n</code></pre> <p>This will run the tests for all versions of python.</p> <p>See here for more information on running <code>nox</code> locally.</p> <p>If you're making changes that will require updates to the documentation, please do so accordingly. Documentation lives in the <code>docs/</code> directory and can be served locally with:</p> <pre><code>mkdocs serve\n</code></pre> <p>See here for more information on working with <code>mkdocs</code>.</p> <p>Once you're ready with your shiny, TDD'd feature, commit, push, and open a pull request and I'll be happy to review. If you're having issues with any of this setup please do let me know and I'll try and help.</p>"},{"location":"imdb/","title":"IMDb","text":""},{"location":"imdb/#usage","title":"Usage","text":"<p>To access IMDb data points, first ensure you have loaded the IMDb source through:</p> <pre><code>await phylm.load_source(\"imdb\")\n</code></pre> <p>Alternatively you can instantiate the IMDb source class directly through:</p> <pre><code>from phylm.sources import Imdb\n\nimdb = Imdb(raw_title=\"The Matrix\", raw_year=1999) \u00a0# raw_year is optional\nawait imdb.load_source()\n</code></pre>"},{"location":"imdb/#movie-id","title":"Movie ID","text":"<p>If you know the IMDb movie ID you can instantiate the <code>Phylm</code> class with an <code>imdb_id</code> property:</p> <pre><code>from phylm.sources import Imdb\n\nimdb = Imdb(raw_title=\"The Matrix\", imdb_id=\"0133093\")\n</code></pre> <p>Then, when running <code>load_source</code> for <code>imdb</code>, <code>phylm</code> will first perform a search based on the ID. If the ID is valid the result will be selected, if not then it will fall back to a title search.</p> <p>Alternatively, you can pass it to <code>load_source</code> with <code>\"imdb\"</code> as the first argument:</p> <pre><code>await phylm.load_source(\"imdb\", imdb_id=\"0133093\")\n</code></pre> <p>Or instantiate the IMDb source class with the ID:</p> <pre><code>from phylm.sources import Imdb\n\nimdb = Imdb(movie_id=\"0133093\")\n</code></pre> <p>If instantiating the class directly you must supply at least one of <code>movie_id</code> or <code>raw_title</code>, otherwise a <code>ValueError</code> will be raised.</p>"},{"location":"imdb/#reference","title":"Reference","text":"<p>Class to abstract an IMDb movie object.</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.id","title":"<code>id: Optional[str]</code>  <code>property</code>","text":"<p>Return the IMDb id.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the id of the movie</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.plot","title":"<code>plot: Optional[str]</code>  <code>property</code>","text":"<p>Return the plot.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the plot of the movie</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.rating","title":"<code>rating: Optional[float]</code>  <code>property</code>","text":"<p>Return the IMDb rating.</p> <p>Returns:</p> Type Description <code>Optional[float]</code> <p>the rating of the movie</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.runtime","title":"<code>runtime: Optional[str]</code>  <code>property</code>","text":"<p>Return the runtime.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the runtime of the movie</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.title","title":"<code>title: Optional[str]</code>  <code>property</code>","text":"<p>Return the IMDb title.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the title of the movie</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.year","title":"<code>year: Optional[int]</code>  <code>property</code>","text":"<p>Return the movie's year.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>the year the movie was made</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.__init__","title":"<code>__init__(raw_title: Optional[str] = None, movie_id: Optional[str] = None, raw_year: Optional[int] = None) -&gt; None</code>","text":"<p>Initialize the object.</p> <p>Note that at least one of <code>raw_title</code> or <code>movie_id</code> must be given to be used as a search term. <code>movie_id</code> is preferred over <code>raw_title</code>.</p> <p>Parameters:</p> Name Type Description Default <code>raw_title</code> <code>Optional[str]</code> <p>the title of the movie</p> <code>None</code> <code>movie_id</code> <code>Optional[str]</code> <p>the <code>IMDb</code> id of the movie</p> <code>None</code> <code>raw_year</code> <code>Optional[int]</code> <p>an optional year for improved matching if only title is given</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if neither <code>raw_title</code> nor <code>movie_id</code> is supplied</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.cast","title":"<code>cast(limit: int = 5) -&gt; List[str]</code>","text":"<p>Return the cast.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>an optional number of cast members to return</p> <code>5</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>a list of the movie's cast members</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.directors","title":"<code>directors(limit: int = 3) -&gt; List[str]</code>","text":"<p>Return the director(s).</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>an optional number of director to return</p> <code>3</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>a list of the movie's directors</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.genres","title":"<code>genres(limit: int = 3) -&gt; List[str]</code>","text":"<p>Return the genres.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>an optional number of genres to return</p> <code>3</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>a list of the movie's genres</p>"},{"location":"imdb/#phylm.sources.imdb.Imdb.load_source","title":"<code>load_source() -&gt; None</code>  <code>async</code>","text":"<p>Asynchronously load the data for from the source.</p>"},{"location":"mtc/","title":"Metacritic","text":""},{"location":"mtc/#usage","title":"Usage","text":"<p>To access Metacritic data points, first ensure you have loaded the Metacritic source through:</p> <pre><code>await phylm.load_source(\"mtc\")\n</code></pre> <p>Alternatively you can instantiate the Metacritic source class directly through:</p> <pre><code>from phylm.sources import Mtc\n\nmtc = Mtc(raw_title=\"The Matrix\", raw_year=1999) \u00a0# raw_year is optional\nawait mtc.load_source()\n</code></pre>"},{"location":"mtc/#reference","title":"Reference","text":"<p>Class to abstract a Metacritic movie search result.</p>"},{"location":"mtc/#phylm.sources.mtc.Mtc.rating","title":"<code>rating: Optional[str]</code>  <code>property</code>","text":"<p>Return the rating.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the mtc rating</p>"},{"location":"mtc/#phylm.sources.mtc.Mtc.title","title":"<code>title: Optional[str]</code>  <code>property</code>","text":"<p>Return the title.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the title of the movie</p>"},{"location":"mtc/#phylm.sources.mtc.Mtc.year","title":"<code>year: Optional[int]</code>  <code>property</code>","text":"<p>Return the year.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>the year of the movie</p>"},{"location":"mtc/#phylm.sources.mtc.Mtc.__init__","title":"<code>__init__(raw_title: str, raw_year: Optional[int] = None) -&gt; None</code>","text":"<p>Initialize the object.</p> <p>Parameters:</p> Name Type Description Default <code>raw_title</code> <code>str</code> <p>the given title of the movie</p> required <code>raw_year</code> <code>Optional[int]</code> <p>an optional year for improved matching</p> <code>None</code>"},{"location":"mtc/#phylm.sources.mtc.Mtc.load_source","title":"<code>load_source(session: Optional[ClientSession] = None) -&gt; None</code>  <code>async</code>","text":"<p>Asynchronously load the data from the source.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Optional[ClientSession]</code> <p>an optional instance of <code>aiohttp.ClientSession</code> in which to run the request</p> <code>None</code>"},{"location":"phylm/","title":"Phylm","text":"<p>This is the main entrypoint class.</p>"},{"location":"phylm/#usage","title":"Usage","text":"<p>First instantiate the class with a <code>title</code> property:</p> <pre><code>from phylm import Phylm\n\np = Phylm(title=\"The Matrix\")\n</code></pre> <p>You can also provide a <code>year</code> property for improved matching:</p> <pre><code>from phylm import Phylm\n\np = Phylm(title=\"The Matrix\", year=1999)\n</code></pre> <p>Next, asynchronously load a source through either <code>load_sources</code> or <code>load_source</code>:</p> <pre><code>await p.load_sources([\"imdb\", \"rt\"])\nawait p.load_source(\"mtc\")\n</code></pre> <p>The available sources are:</p> <pre><code>\"imdb\" # IMDb\n\"rt\" # Rotten Tomatoes\n\"mtc\" # Metacritic\n\"tmdb\" # TMDB\n</code></pre> <p>Now the source will be available through a property of the same name and datapoints on that source can be accessed:</p> <pre><code>&gt;&gt;&gt; p.imdb\n&lt;phylm.sources.imdb.Imdb object at 0x108a94810&gt;\n&gt;&gt;&gt; p.imdb.rating\n8.8\n</code></pre>"},{"location":"phylm/#low-confidence","title":"Low Confidence","text":"<p><code>phylm</code> will try to match the given title with the results through an exact match on the title. If <code>phylm</code> can't find an exact match then it will select the first result and set a <code>low_confidence</code> flag to <code>True</code>. This and the <code>year</code> method on a source can be helpful for validating that the result is the desired one:</p> <pre><code>from phylm import Phylm\np = Phylm(\"Ambiguous Movie\")  # suppose this movie was released in 1999\nawait p.load_source(\"imdb\")\nif p.imdb.low_confidence and p.imdb.year != 1999:\n    # it's unlikely we're dealing with the right \"Ambigous Movie\"\n</code></pre> <p>See the docs for a source for a full list of the available data points.</p>"},{"location":"phylm/#reference","title":"Reference","text":"<p>Main <code>Phylm</code> entrypoint.</p>"},{"location":"phylm/#phylm.phylm.Phylm.imdb","title":"<code>imdb: Imdb</code>  <code>property</code>","text":"<p>Return the IMDb data.</p> <p>Returns:</p> Type Description <code>Imdb</code> <p>The IMDb data</p> <p>Raises:</p> Type Description <code>SourceNotLoadedError</code> <p>if the source is not loaded</p>"},{"location":"phylm/#phylm.phylm.Phylm.mtc","title":"<code>mtc: Mtc</code>  <code>property</code>","text":"<p>Return the Metacritic data.</p> <p>Returns:</p> Type Description <code>Mtc</code> <p>The Metacritic data</p> <p>Raises:</p> Type Description <code>SourceNotLoadedError</code> <p>if the source is not loaded</p>"},{"location":"phylm/#phylm.phylm.Phylm.rt","title":"<code>rt: Rt</code>  <code>property</code>","text":"<p>Return the Rotten Tomatoes data.</p> <p>Returns:</p> Type Description <code>Rt</code> <p>The Rotten Tomatoes data</p> <p>Raises:</p> Type Description <code>SourceNotLoadedError</code> <p>if the source is not loaded</p>"},{"location":"phylm/#phylm.phylm.Phylm.tmdb","title":"<code>tmdb: Tmdb</code>  <code>property</code>","text":"<p>Return the TMDB data.</p> <p>Returns:</p> Type Description <code>Tmdb</code> <p>The TMDB data</p> <p>Raises:</p> Type Description <code>SourceNotLoadedError</code> <p>if the source is not loaded</p>"},{"location":"phylm/#phylm.phylm.Phylm.__init__","title":"<code>__init__(title: str, imdb_id: Optional[str] = None, year: Optional[int] = None, tmdb_id: Optional[str] = None) -&gt; None</code>","text":"<p>Initialize a <code>Phylm</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>the title of the movie</p> required <code>imdb_id</code> <code>Optional[str]</code> <p>an optional <code>IMDb</code> ID of the movie</p> <code>None</code> <code>year</code> <code>Optional[int]</code> <p>an optional year of the movie</p> <code>None</code> <code>tmdb_id</code> <code>Optional[str]</code> <p>an optional <code>TMDB</code> ID of the movie</p> <code>None</code>"},{"location":"phylm/#phylm.phylm.Phylm.load_source","title":"<code>load_source(source: str, imdb_id: Optional[str] = None, session: Optional[ClientSession] = None, tmdb_id: Optional[str] = None) -&gt; Phylm</code>  <code>async</code>","text":"<p>Asynchronously load the film data for a source.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>the desired source</p> required <code>imdb_id</code> <code>Optional[str]</code> <p>an optional <code>IMDb</code> id which will be used to load the imdb data instead of a basic search on the title</p> <code>None</code> <code>session</code> <code>Optional[ClientSession]</code> <p>an optional instance of <code>aiohttp.ClientSession</code> in which to run the request</p> <code>None</code> <code>tmdb_id</code> <code>Optional[str]</code> <p>an optional <code>TMDB</code> id which will be used to load the TMDB data instead of a basic search on the title</p> <code>None</code> <p>Returns:</p> Type Description <code>Phylm</code> <p>the instance</p> <p>Raises:</p> Type Description <code>UnrecognizedSourceError</code> <p>if the source is not recognized</p>"},{"location":"phylm/#phylm.phylm.Phylm.load_sources","title":"<code>load_sources(sources: List[str]) -&gt; Phylm</code>  <code>async</code>","text":"<p>Asynchronously load multiple sources.</p> <p>Parameters:</p> Name Type Description Default <code>sources</code> <code>List[str]</code> <p>a list of the desired sources</p> required <p>Returns:</p> Type Description <code>Phylm</code> <p>the instance</p>"},{"location":"rt/","title":"Rotten Tomatoes","text":""},{"location":"rt/#usage","title":"Usage","text":"<p>To access Rotten Tomatoes data points, first ensure you have loaded the Rotten Tomatoes source through:</p> <pre><code>await phylm.load_source(\"rt\")\n</code></pre> <p>Alternatively you can instantiate the Rotten Tomatoes source class directly through:</p> <pre><code>from phylm.sources import Rt\n\nrot_tom = Rt(raw_title=\"The Matrix\", raw_year=1999) \u00a0# raw_year is optional\nawait rot_tom.load_source()\n</code></pre>"},{"location":"rt/#reference","title":"Reference","text":"<p>Class to abstract a Rotten Tomatoes result.</p>"},{"location":"rt/#phylm.sources.rt.Rt.title","title":"<code>title: Optional[str]</code>  <code>property</code>","text":"<p>Return the title.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the title of the movie</p>"},{"location":"rt/#phylm.sources.rt.Rt.tomato_score","title":"<code>tomato_score: Optional[str]</code>  <code>property</code>","text":"<p>Return the Tomatometer Score.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the tomatometer score</p>"},{"location":"rt/#phylm.sources.rt.Rt.year","title":"<code>year: Optional[str]</code>  <code>property</code>","text":"<p>Return the year.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the year of the movie</p>"},{"location":"rt/#phylm.sources.rt.Rt.__init__","title":"<code>__init__(raw_title: str, raw_year: Optional[int] = None) -&gt; None</code>","text":"<p>Initialize the object.</p> <p>Parameters:</p> Name Type Description Default <code>raw_title</code> <code>str</code> <p>the given title of the movie</p> required <code>raw_year</code> <code>Optional[int]</code> <p>an optional year for improved matching</p> <code>None</code>"},{"location":"rt/#phylm.sources.rt.Rt.load_source","title":"<code>load_source(session: Optional[ClientSession] = None) -&gt; None</code>  <code>async</code>","text":"<p>Asynchronously load the data from the source.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Optional[ClientSession]</code> <p>an optional instance of <code>aiohttp.ClientSession</code> in which to run the request</p> <code>None</code>"},{"location":"tmdb/","title":"TMDB","text":""},{"location":"tmdb/#usage","title":"Usage","text":"<p>To access TMDB data points, first ensure you have loaded the TMDB source through:</p> <pre><code>await phylm.load_source(\"tmdb\")\n</code></pre> <p>Alternatively you can instantiate the TMDB source class directly through:</p> <pre><code>from phylm.sources import Tmdb\n\ntmdb = Tmdb(raw_title=\"The Matrix\", raw_year=1999) \u00a0# raw_year is optional\nawait tmdb.load_source()\n</code></pre>"},{"location":"tmdb/#movie-id","title":"Movie ID","text":"<p>If you know the TMDB movie ID you can instantiate the <code>Phylm</code> class with a <code>tmdb_id</code> property:</p> <pre><code>from phylm.sources import Tmdb\n\ntmdb = Tmdb(raw_title=\"The Matrix\", tmdb_id=\"609\")\n</code></pre> <p>Then, when running <code>load_source</code> for <code>tmdb</code>, <code>phylm</code> will first perform a search based on the ID. If the ID is valid the result will be selected, if not then it will fall back to a title search.</p> <p>Alternatively, you can pass it to <code>load_source</code> with <code>\"tmdb\"</code> as the first argument:</p> <pre><code>await phylm.load_source(\"tmdb\", tmdb_id=\"609\")\n</code></pre> <p>Or instantiate the TMDB source class with the ID:</p> <pre><code>from phylm.sources import Tmdb\n\ntmdb = Tmdb(movie_id=\"0133093\")\n</code></pre> <p>If instantiating the class directly you must supply at least one of <code>movie_id</code> or <code>raw_title</code>, otherwise a <code>ValueError</code> will be raised.</p> <p>Note that TMDB doesn't provide any fuzzy search for title, only exact matches are returned.</p>"},{"location":"tmdb/#reference","title":"Reference","text":"<p>Class to abstract a TMDB result.</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.id","title":"<code>id: Optional[str]</code>  <code>property</code>","text":"<p>Return the TMDB id.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the id of the movie</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.imdb_id","title":"<code>imdb_id: Optional[str]</code>  <code>property</code>","text":"<p>Return the IMDb id.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the IMDb id of the movie</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.plot","title":"<code>plot: Optional[str]</code>  <code>property</code>","text":"<p>Return the plot.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the plot of the movie</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.rating","title":"<code>rating: Optional[float]</code>  <code>property</code>","text":"<p>Return the TMDB rating.</p> <p>Returns:</p> Type Description <code>Optional[float]</code> <p>the rating of the movie</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.release_date","title":"<code>release_date: Optional[str]</code>  <code>property</code>","text":"<p>Return the movie's release_date.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the release date of the movie</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.runtime","title":"<code>runtime: Optional[int]</code>  <code>property</code>","text":"<p>Return the runtime.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>the runtime of the movie</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.title","title":"<code>title: Optional[str]</code>  <code>property</code>","text":"<p>Return the TMDB title.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the title of the movie</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.year","title":"<code>year: Optional[int]</code>  <code>property</code>","text":"<p>Return the movie's year.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>the year the movie was made</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.__init__","title":"<code>__init__(raw_title: Optional[str] = None, movie_id: Optional[str] = None, raw_year: Optional[int] = None, api_key: Optional[str] = None, session: Optional[ClientSession] = None) -&gt; None</code>","text":"<p>Initialize the object.</p> <p>Note that at least one of <code>raw_title</code> or <code>movie_id</code> must be given to be used as a search term. <code>movie_id</code> is preferred over <code>raw_title</code>.</p> <p>Parameters:</p> Name Type Description Default <code>raw_title</code> <code>Optional[str]</code> <p>the title of the movie. Note that TMDB doesn't support fuzzy search.</p> <code>None</code> <code>movie_id</code> <code>Optional[str]</code> <p>the TMDB id of the movie.</p> <code>None</code> <code>raw_year</code> <code>Optional[int]</code> <p>an optional year for improved matching if only title is given.</p> <code>None</code> <code>api_key</code> <code>Optional[str]</code> <p>a TMDB api key. Must be supplied here or as an env var</p> <code>None</code> <code>session</code> <code>Optional[ClientSession]</code> <p>a <code>aiohttp.ClientSession</code> instance. One will be created if not supplied.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if neither <code>raw_title</code> nor <code>movie_id</code> is supplied.</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.genres","title":"<code>genres(limit: int = 3) -&gt; List[str]</code>","text":"<p>Return the genres.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>an optional number of genres to return</p> <code>3</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>a list of the movie's genres</p>"},{"location":"tmdb/#phylm.sources.tmdb.Tmdb.load_source","title":"<code>load_source(session: Optional[ClientSession] = None) -&gt; None</code>  <code>async</code>","text":"<p>Asynchronously load the data for from the source.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Optional[ClientSession]</code> <p>an optional <code>aiohttp.ClientSession</code> instance</p> <code>None</code>"},{"location":"tools/","title":"Tools","text":"<p><code>phylm</code> also offers some tools and utilities related to movies.</p>"},{"location":"tools/#search-movies","title":"Search movies","text":"<p>For a given movie title query you can return a list of search results from IMDb through <code>search_movies</code>:</p> <pre><code>&gt;&gt;&gt; from phylm.tools import search_movies\n&gt;&gt;&gt; search_movies(\"the matrix\")\n[{\n  'title': 'The Matrix',\n  'kind': 'movie',\n  'year': 1999,\n  'cover_photo': 'https://some-url.com',\n  'imdb_id': '0133093',\n}, {\n  'title': 'The Matrix Reloaded',\n  'kind': 'movie',\n  'year': 2003,\n  'cover_photo': 'https://some-url.com',\n  'imdb_id': '0234215',\n}, {\n...\n</code></pre>"},{"location":"tools/#phylm.tools.search_movies","title":"<code>phylm.tools.search_movies(query: str) -&gt; List[Dict[str, Union[str, int]]]</code>","text":"<p>Return a list of search results for a query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>the search query</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Union[str, int]]]</code> <p>a list of search results</p>"},{"location":"tools/#tmdb","title":"TMDB","text":"<p><code>phylm</code> also provides tools to interact with The Movie Database (TMDb).</p> <p>To use TMDb tools you'll need to sign up for an API key, instructions here. Once you have your key, export it as an env var called <code>TMDB_API_KEY</code> so that it's available to use in these tools. You also have the option of passing in the key as an argument to each function.</p>"},{"location":"tools/#search-movies_1","title":"Search movies","text":"<p>For a given movie title query you can return a list of search results from TMDb through <code>search_tmdb_movies</code>. Note that this search performs a lot quicker than the <code>imdb</code> <code>search_movies</code>.</p> <pre><code>&gt;&gt;&gt; from phylm.tools import search_tmdb_movies\n&gt;&gt;&gt; search_tmdb_movies(\"The Matrix\", api_key=\"abc\") #\u00a0the api key can be provided as an env var instead\n[{\n  'adult': False,\n  'backdrop_path': '/fNG7i7RqMErkcqhohV2a6cV1Ehy.jpg',\n  'genre_ids': [28, 878],\n  'id': 603,\n  'original_language': 'en',\n  'original_title': 'The Matrix',\n  'overview': 'Set in the 22nd century, The Matrix tells the story of a computer hacker...'\n  'popularity': 79.956,\n  'poster_path': '/f89U3ADr1oiB1s9GkdPOEpXUk5H.jpg',\n  'release_date': '1999-03-30',\n  'title': 'The Matrix',\n  'video': False,\n  'vote_average': 8.2,\n  'vote_count': 20216,\n}, {\n  ...\n}\n</code></pre> <p>By default the <code>release_date</code> will be the US release date. You can specify a different region by providing a region argument:</p> <pre><code>&gt;&gt;&gt; from phylm.tools import search_tmdb_movies\n&gt;&gt;&gt; search_tmdb_movies(\"The Matrix\", region=\"gb\")\n[{\n  'id': 603,\n  ...\n  'release_date': '1999-06-11',\n  'title': 'The Matrix',\n  ...\n}, {\n  ...\n}\n</code></pre>"},{"location":"tools/#phylm.tools.search_tmdb_movies","title":"<code>phylm.tools.search_tmdb_movies(query: str, api_key: Optional[str] = None, region: Optional[str] = None) -&gt; List[Dict[str, Any]]</code>","text":"<p>Search for movies on TMDb.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>the query string</p> required <code>api_key</code> <code>Optional[str]</code> <p>an api_key can either be provided here or through a TMDB_API_KEY env var</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>an optional region to provide with the search request, affects the release_date value returned, must be provided in ISO 3166-1 format (eg. \"us\" or \"gb\")</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: the search results</p>"},{"location":"tools/#get-streaming-providers","title":"Get streaming providers","text":"<p>For a given movie TMDb id and list of regions, you can return a list of streaming providers from TMDb via Just Watch through <code>get_streaming_providers</code>.</p> <pre><code>&gt;&gt;&gt; from phylm.tools import get_streaming_providers\n&gt;&gt;&gt; get_streaming_providers(tmdb_movie_id=\"438631\", regions=[\"gb\"], api_key=\"abc\")\n{\n  'gb': {\n    'link': 'https://www.themoviedb.org/movie/438631-dune/watch?locale=GB',\n    'rent': [{\n      'display_priority': 8,\n      'logo_path': '/pZgeSWpfvD59x6sY6stT5c6uc2h.jpg',\n      'provider_id': 130,\n      'provider_name': 'Sky Store',\n    }],\n  },\n}\n</code></pre> <p>Consult the TMDb docs for more information on the data that's returned.</p>"},{"location":"tools/#phylm.tools.get_streaming_providers","title":"<code>phylm.tools.get_streaming_providers(tmdb_movie_id: str, regions: List[str], api_key: Optional[str] = None) -&gt; Dict[str, Any]</code>","text":"<p>Return a list of streaming providers for a given movie.</p> <p>Parameters:</p> Name Type Description Default <code>tmdb_movie_id</code> <code>str</code> <p>the tmdb id of the movie</p> required <code>regions</code> <code>List[str]</code> <p>a list of regions to trim down the return list</p> required <code>api_key</code> <code>Optional[str]</code> <p>an api_key can either be provided here or through a TMDB_API_KEY env var</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: a dictionary of streaming providers, keyed by region name</p>"}]}